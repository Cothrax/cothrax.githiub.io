<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cothrax&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cothrax.xyz/"/>
  <updated>2019-07-26T09:50:40.876Z</updated>
  <id>http://cothrax.xyz/</id>
  
  <author>
    <name>Cothrax</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019 Multi-University Training (NOWCO)</title>
    <link href="http://cothrax.xyz/2019/07/26/2019-sv-trainig/"/>
    <id>http://cothrax.xyz/2019/07/26/2019-sv-trainig/</id>
    <published>2019-07-26T07:49:04.000Z</published>
    <updated>2019-07-26T09:50:40.876Z</updated>
    
    <content type="html"><![CDATA[<p>应姚神的要求写一点比赛<ruby>总结<rp> (</rp><rt>bī bī</rt><rp>) </rp></ruby>… 还有一些<ruby>题解<rp> (</rp><rt>kǒu hú</rt><rp>) </rp></ruby>啥的。</p><a id="more"></a><h1 id="第一场"><a href="#第一场" class="headerlink" title="第一场"></a>第一场</h1><p>鸽了，大家都在社会实践。</p><h1 id="第二场"><a href="#第二场" class="headerlink" title="第二场"></a>第二场</h1><p>虽然还在社会实践，但我抽空看了会题。<br>先发现F是个大暴力，然而学长没有写。</p><div><script>enable_magic("#magic5334182698",1,22);</script><div id="magic5334182698"><figure class="highlight c++"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">31</span>;</span><br><span class="line">ll v[N][N]; <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, ll sta, ll sum, <span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt == n) &#123; ans = max(ans, sum); <span class="keyword">return</span>;  &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>*n-k &lt; n-cnt) <span class="keyword">return</span>;</span><br><span class="line">dfs(k+<span class="number">1</span>, sta, sum, cnt);</span><br><span class="line">ll new_sum = sum;</span><br><span class="line">rep(i, <span class="number">0</span>, <span class="number">2</span>*n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span>(i == k) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;sta) new_sum -= v[i][k];</span><br><span class="line"><span class="keyword">else</span> new_sum += v[i][k];</span><br><span class="line">dfs(k+<span class="number">1</span>, sta|(<span class="number">1</span>&lt;&lt;k), new_sum, cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n);</span><br><span class="line">rep(i, <span class="number">0</span>, <span class="number">2</span>*n<span class="number">-1</span>) rep(j, <span class="number">0</span>, <span class="number">2</span>*n<span class="number">-1</span>) read(v[i][j]);</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>看到H觉得挺眼熟的，不过学长在写我就没细想。<br>结束后补了一下H复习一下单调栈。</p><div><script>enable_magic("#magic5932367425",1,22);</script><div id="magic5932367425"><figure class="highlight c++"><figcaption><span>H.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m; <span class="keyword">char</span> mat[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> up[N][N], l[N][N], r[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UP</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i &gt;= <span class="number">0</span> ? up[i][j] : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> area[<span class="number">2</span>];</span><br><span class="line">pair&lt;P, P&gt; rect[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solv</span><span class="params">(<span class="keyword">int</span> row)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> P stk[N];</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">stk[t++] = mkp(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">rep(j, <span class="number">0</span>, m<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t &amp;&amp; stk[t<span class="number">-1</span>].X &gt;= up[row][j]) t--;</span><br><span class="line">l[row][j] = t ? stk[t<span class="number">-1</span>].Y+<span class="number">1</span> : j;</span><br><span class="line">stk[t++] = mkp(up[row][j], j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">stk[t++] = mkp(<span class="number">0</span>, m);</span><br><span class="line">per(j, m<span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t &amp;&amp; stk[t<span class="number">-1</span>].X &gt;= up[row][j]) t--;</span><br><span class="line">r[row][j] = t ? stk[t<span class="number">-1</span>].Y<span class="number">-1</span> : j;</span><br><span class="line">stk[t++] = mkp(up[row][j], j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(j, <span class="number">0</span>, m<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cur = (r[row][j]-l[row][j]+<span class="number">1</span>)*up[row][j];</span><br><span class="line">pair&lt;P, P&gt; tmp = mkp(mkp(row-up[row][j]+<span class="number">1</span>, l[row][j]),</span><br><span class="line">  mkp(row, r[row][j]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur &gt; area[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">area[<span class="number">1</span>] = area[<span class="number">0</span>]; rect[<span class="number">1</span>] = rect[<span class="number">0</span>];</span><br><span class="line">area[<span class="number">0</span>] = cur; rect[<span class="number">0</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rect[<span class="number">0</span>] == tmp) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cur &gt; area[<span class="number">1</span>]) area[<span class="number">1</span>] = cur, rect[<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n); read(m);</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mat[i]);</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) rep(j, <span class="number">0</span>, m<span class="number">-1</span>)</span><br><span class="line">up[i][j] = mat[i][j] == <span class="string">'1'</span> ? UP(i<span class="number">-1</span>, j) + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) solv(i);</span><br><span class="line"><span class="keyword">int</span> w = rect[<span class="number">0</span>].Y.X-rect[<span class="number">0</span>].X.X+<span class="number">1</span>,</span><br><span class="line">h = rect[<span class="number">0</span>].Y.Y-rect[<span class="number">0</span>].X.Y+<span class="number">1</span>,</span><br><span class="line">ans = max(area[<span class="number">1</span>], max((w<span class="number">-1</span>)*h, w*(h<span class="number">-1</span>)));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>D跟J想了一会，觉得不太可做。</p><blockquote><p>D还是挺神奇的…<br>题面应该是这场比赛中最短的了，题意是求k小团($k\leq 10^6$)。<br>从空集开始暴力BFS即可（很像dijkstra）。</p></blockquote><div><script>enable_magic("#magic1922189746",1,22);</script><div id="magic1922189746"><figure class="highlight c++"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int128 big;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, pair&lt;<span class="keyword">int</span>, big&gt;&gt; node;</span><br><span class="line"><span class="keyword">char</span> g[N][N]; <span class="keyword">int</span> n, k;</span><br><span class="line">big msk[N]; ll w[N];</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node, <span class="built_in">vector</span>&lt;node&gt;, greater&lt;node&gt; &gt; q;</span><br><span class="line"><span class="function">ll <span class="title">solv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.push(mkp((ll)<span class="number">0</span>, mkp(<span class="number">-1</span>, (big)<span class="number">0</span>)));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node cur = q.top(); q.pop();</span><br><span class="line"><span class="keyword">if</span>(--k == <span class="number">0</span>) <span class="keyword">return</span> cur.X;</span><br><span class="line">rep(i, cur.Y.X+<span class="number">1</span>, n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span>((((big)<span class="number">1</span>&lt;&lt;i)&amp;cur.Y.Y) == <span class="number">0</span> &amp;&amp; (cur.Y.Y&amp;msk[i]) == cur.Y.Y)</span><br><span class="line">q.push(mkp(cur.X+w[i], mkp(i, cur.Y.Y|((big)<span class="number">1</span>&lt;&lt;i))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">read(n); read(k);</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) read(w[i]);</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, g[i]);</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) rep(j, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span>(g[i][j] == <span class="string">'1'</span>) msk[i] |= (big)<span class="number">1</span>&lt;&lt;j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, solv());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>然后我们爆零了???<br>赛后发现A和B是两道水题…A猜个结论，B线性递推乱搞搞。<br>E也挺有意思的，不过开始题看错了。</p><blockquote><p><strong>题意</strong>：一个n*m的迷宫($n\leq 50000, m\leq 10$)，某些点的状态是墙，可以左右移动或者向下移动。每次询问$(1, x)$到$(n, y)$的路径方案数，或者修改某个点的状态。<br><br><br><strong>口胡</strong>：<br>记$f(i, j)$为从(1, x)出发，经过$(i-1, j)$走到$(i, j)$的方案数，很容易写出状态方程。<br>然后每一行的转移可以写成一个矩阵，将所有行的矩阵乘起来得到$M$，答案就是$M_{xy}$。<br>每次修改都只会修改所在行的矩阵，用线段树维护这些矩阵的乘积即可。</p></blockquote><div><script>enable_magic("#magic4166024712",1,22);</script><div id="magic4166024712"><figure class="highlight c++"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12</span>, M = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">const</span> ll Z = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m, n, q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll a[N][N];</span><br><span class="line">ll* <span class="keyword">operator</span> [] (<span class="keyword">int</span> idx) &#123; <span class="keyword">return</span> a[idx]; &#125;</span><br><span class="line">matrix <span class="keyword">operator</span> * (matrix b)</span><br><span class="line">&#123;</span><br><span class="line">matrix c;</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) rep(j, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i][j] = <span class="number">0</span>;</span><br><span class="line">rep(l, <span class="number">0</span>, n<span class="number">-1</span>) (c[i][j] += a[i][l]*b[l][j]%Z) %=Z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125; sgt[M*<span class="number">4</span>], w[M], id;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == e) &#123; sgt[i] = w[b]; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line">build(lc, b, mid); build(rc, mid+<span class="number">1</span>, e);</span><br><span class="line">sgt[i] = sgt[lc] * sgt[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e&lt;l || r&lt;b) <span class="keyword">return</span> id;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=b &amp;&amp; e&lt;=r) <span class="keyword">return</span> sgt[i];</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> query(lc, b, mid, l, r) * query(rc, mid+<span class="number">1</span>, e, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == e) &#123; sgt[i] = w[b]; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) modify(lc, b, mid, x); <span class="keyword">else</span> modify(rc, mid+<span class="number">1</span>, e, x);</span><br><span class="line">sgt[i] = sgt[lc] * sgt[rc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> maze[M][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> row)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lst = <span class="number">0</span>;</span><br><span class="line">rep(h, <span class="number">0</span>, n<span class="number">-1</span>) rep(l, <span class="number">0</span>, n<span class="number">-1</span>) w[row][h][l] = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(maze[row][i] == <span class="string">'1'</span>) lst = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == n<span class="number">-1</span> || maze[row][i+<span class="number">1</span>] == <span class="string">'1'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// [lst, i] consecutive 0</span></span><br><span class="line">rep(h, lst, i) rep(l, lst, i) w[row][h][l] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(m); read(n); read(q);</span><br><span class="line">rep(i, <span class="number">0</span>, m<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, maze[i]), init(i);</span><br><span class="line">build(<span class="number">1</span>, <span class="number">0</span>, m<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">1</span>, q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z; read(x); read(y); read(z);</span><br><span class="line">y--; z--;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">maze[y][z] = maze[y][z] == <span class="string">'1'</span> ? <span class="string">'0'</span> : <span class="string">'1'</span>;</span><br><span class="line">init(y); modify(<span class="number">1</span>, <span class="number">0</span>, m<span class="number">-1</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(maze[<span class="number">0</span>][y] == <span class="string">'0'</span> &amp;&amp; maze[m<span class="number">-1</span>][z] == <span class="string">'0'</span>)</span><br><span class="line">ans = sgt[<span class="number">1</span>][y][z];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>J目前还不会。</p><h1 id="第三场"><a href="#第三场" class="headerlink" title="第三场"></a>第三场</h1><p>说实话，比赛体验极差，只会写签到题。<br>B还WA了一次，漏了一个初始条件。后来开了个D，找出循环节后就一直WA到比赛结束…<br>自我检讨一下：</p><ol><li>打了一年cf…不太习惯多校的出题风格</li><li>校赛后就没怎么写题，荒废了好久</li><li>刚回家比较迷糊</li></ol><p>（找了这么多借口，可能只是我太菜了qwq）</p><blockquote><p>立一个flag：第四场认真打</p></blockquote><p>题晚上补吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应姚神的要求写一点比赛&lt;ruby&gt;总结&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;bī bī&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;… 还有一些&lt;ruby&gt;题解&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;kǒu hú&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;啥的。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://cothrax.xyz/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Graph Realization Problem</title>
    <link href="http://cothrax.xyz/2019/01/10/graph-realization-problem/"/>
    <id>http://cothrax.xyz/2019/01/10/graph-realization-problem/</id>
    <published>2019-01-10T14:42:44.000Z</published>
    <updated>2019-07-26T09:29:02.897Z</updated>
    
    <content type="html"><![CDATA[<p>Codeforces Good Bye 2018中的<a href="https://codeforces.com/contest/1091/problem/E" target="_blank" rel="noopener">E</a>是一道阅读理解题，题面中的给出了到<a href="https://en.wikipedia.org/wiki/Graph\_realization\_problem" target="_blank" rel="noopener">wiki</a>的链接，但比赛时我怎么有心情读一大段英文wiki…<br>这道题的背景知识叫<strong>可简单图化问题</strong>(Graph Realization)，指给定一个有限序列 $D=(d_1,d_2,\cdots,d_n)$ ，是否存在一个无自环的无向图G，使得G中顶点的度数构成的序列为$D$。</p><a id="more"></a><h1 id="Havel-Hakimi-Algorithm"><a href="#Havel-Hakimi-Algorithm" class="headerlink" title="Havel-Hakimi Algorithm"></a>Havel-Hakimi Algorithm</h1><p><strong>定理</strong>：令$D=(d_1,\cdots,d_n)$，其中$d_1\geq d_2 \geq\cdots\geq d_n$，$D$是可简单图化的当且仅当$D’=(d_2-1,d_3-1,\cdots,d_{d_1+1}-1,d_{d_1+2},\cdots,d_n)$非负且是可简单化的。</p><h2 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h2><p>$\Leftarrow)$ 这个定理的充分性是显然的。<br>设$d_i$对应的节点是$v_i$，对n归纳，当我们得到了$D’$对应的图$G’$，将$v_1$与$G’$中的$v_2,\cdots,v_{d_1+1}$连边，就构造出了$G$</p><p>$\Rightarrow)$ 要证明这个条件的必要性，考虑若已有一个图$G$，能否构造出$G’$。<br>记$S=\{u|(u, v_1)\in G\},\ T=\{v_j|2\leq j\leq d_1+1\}$</p><ol><li>如果$S=T$，那么删去$v_1$及$v_1$和$S$间的边，就得到了$G’$</li><li>否则，存在$v_p\in T,\ v_q\not\in T$，使得$v_p\not\in S,\ v_q\in S$<br>因为$d_p\geq d_q$，所以又存在一个不同的点$z$，使得$v_p$和$z$相邻，$v_q$和$z$不相邻，那么我们删去$(v_p,z)$和$(v_1,v_q)$，添加$(v_1,v_p)$和$v_q,z$，这样保持$v_q$的度数不变，并把$v_p$加到$S$中。<br>重复2的过程，因为$|S|=|T|=d_1$，总会使得$S=T$，这是我们就回到了情况1。</li></ol><h2 id="Implementation-poj-1659"><a href="#Implementation-poj-1659" class="headerlink" title="Implementation - poj 1659"></a>Implementation - poj 1659</h2><p>这是一道水题，给定一个序列，问是否可以简单图化，如果能的话输出任一方案。<br>Havel算法的实现就是，迭代$d_i$，$d_{i+1},…,d_{i+d_1}$都减去1，如果过程中出现负数就无解，最后$d_n=0$就有解，否则无解。复杂度$O(N^2logN)$，方案按照充分性的证明构造即可。</p><div><script>enable_magic("#magic7201268060",1,42);</script><div id="magic7201268060"><figure class="highlight c++"><figcaption><span>poj1659.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forg(i) for(int i = head[u]; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n, g[N][N]; P a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//freopen("std.out", "w", stdout);</span></span><br><span class="line"><span class="keyword">int</span> T; read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">read(n); rep(i, <span class="number">1</span>, n) read(a[i].X), a[i].Y = i;</span><br><span class="line">rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, n) g[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flg = <span class="number">1</span>;</span><br><span class="line">rep(i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line">sort(a+i, a+n+<span class="number">1</span>, greater&lt;P&gt;());</span><br><span class="line"><span class="keyword">if</span>(a[n].X&lt;<span class="number">0</span> || i+a[i].X&gt;n) &#123; flg = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span>(a[i].X == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">rep(j, i+<span class="number">1</span>, i+a[i].X)</span><br><span class="line">&#123;</span><br><span class="line">g[a[i].Y][a[j].Y] = g[a[j].Y][a[i].Y] = <span class="number">1</span>;</span><br><span class="line">a[j].X--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">rep(i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line">rep(j, <span class="number">1</span>, n) <span class="built_in">printf</span>(<span class="string">"%d "</span>, g[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="Erdos–Gallai-theorem"><a href="#Erdos–Gallai-theorem" class="headerlink" title="Erdős–Gallai theorem"></a>Erdős–Gallai theorem</h1><p>另一个定理给出了可简单图化的不等式条件，给定序列$D=(d_1,d_2,\cdots,d_n)$，其中$d_1\geq d_2 \geq\cdots\geq d_n$，$D$可简单图化当且仅当<br>$$\sum_{i=1}^{k}d_i\leq k(k-1)+\sum_{i=k+1}^n min(d_i,k)$$<br>对任意$1\leq k\leq n$成立</p><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2>这个定理的必要性是显然的，式子左边是$S=\{d_1,d_2,...,d_k\}$的度数和，右边第一项是$S$中连边的最大贡献，第二项是$S$与$G\setminus S$间连边的最大贡献。<p>充分性的证明有很多种，也要复杂的多，其中一种构造的证法见：<a href="https://www.sciencedirect.com/science/article/pii/S0012365X09004683" target="_blank" rel="noopener">A short constructive proof of the Erdős–Gallai characterization of graphic lists</a></p><h2 id="Implementation-cf-1091E"><a href="#Implementation-cf-1091E" class="headerlink" title="Implementation - cf 1091E"></a>Implementation - cf 1091E</h2><p>这就是楔子中提到的阅读理解题，题意为：<br>给定$(d_1,d_2,d_3,…,d_n)$，求所有可能的$d_{n+1}$，使得$(d_1,d_2,\cdots,d_{n+1})$可简单图化。<br>$1\leq n\leq 500000$</p><h3 id="My-solution"><a href="#My-solution" class="headerlink" title="My solution"></a>My solution</h3><p><strong>注：下面的n均+1，就是说给定$d_12,\cdots,d_{n-1}$，要确定的是$d_n$</strong><br>首先由握手定理可以确定$d_n$的奇偶性。<br>考虑Erdős–Gallai定理，先将序列降序排列，对于给定$d_n$，记$d_j\leq d_n\leq d_{j+1}$</p><ol><li>当$k\geq j+1$时，$d_n$在式子的左边，分离变量得式$(1)$<br>$$d_n\leq k(k-1)+\sum_{i=k}^{n-1} min(d_i,k)-\sum_{i=1}^{k-1}d_i$$</li><li>当$1\leq k \leq j$时，$d_n$在式子的右边，变形后<br>$$0\leq k(k-1)+\sum_{i=k+1}^{n-1} min(d_i,k)-\sum_{i=1}^{k}d_i+min(d_n,k)$$<ul><li>当$k\leq d_n$时，变成式$(2)$<br>$$0\leq k(k-1)+\sum_{i=k+1}^{n-1} min(d_i,k)-\sum_{i=1}^{k}d_i+k$$</li><li>当$k&gt;d_n$时，分离变量得到式$(3)$<br>$$-d_n\leq k(k-1)+\sum_{i=k+1}^{n-1} min(d_i,k)-\sum_{i=1}^{k}d_i$$</li></ul></li></ol><p>注意到不等式$(1)(2)(3)$右边的部分都只与$k$有关，可以通过二分+前后缀和预处理出来，并建st表。然后枚举$d_n$，分$[1,min(d_n,j)],\ [max(1,d_n),j],\ [j+1,n]$三个区间判断$(2)(3)(1)$即可。</p><p>注意st表空间可能比较吃紧，还有$d_n=0$最好特判一下。</p><div><script>enable_magic("#magic453332297",1,42);</script><div id="magic453332297"><figure class="highlight c++"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forg(i) for(int i = head[u]; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line">ll n, pref[N], suff[N]; <span class="keyword">int</span> d[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ll st[][<span class="number">20</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lgn = <span class="built_in">ceil</span>(log2(n));</span><br><span class="line">rep(j, <span class="number">1</span>, lgn) rep(i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line">st[i][j] = st[i][j<span class="number">-1</span>]; <span class="keyword">int</span> k = i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">if</span>(k &lt;= n) st[i][j] = min(st[i][j], st[k][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll st[][<span class="number">20</span>], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">int</span> len = r-l+<span class="number">1</span>, t = log2(len);</span><br><span class="line"><span class="keyword">return</span> min(st[l][t], st[r-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>][t]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">ll st[<span class="number">3</span>][N][<span class="number">20</span>]; <span class="keyword">int</span> ans[N], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("std.in", "r", stdin);</span></span><br><span class="line"><span class="comment">//freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n); n++;</span><br><span class="line">rep(i, <span class="number">1</span>, n<span class="number">-1</span>) read(d[i]);</span><br><span class="line">sort(d+<span class="number">1</span>, d+n, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">pref[<span class="number">0</span>] = suff[n] = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">1</span>, n<span class="number">-1</span>) pref[i] = pref[i<span class="number">-1</span>] + (ll)d[i];</span><br><span class="line">per(k, n<span class="number">-1</span>, <span class="number">1</span>) suff[k] = suff[k+<span class="number">1</span>] + (ll)d[k];</span><br><span class="line"><span class="keyword">for</span>(ll k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">&#123;</span><br><span class="line">ll j = lbound(d+<span class="number">1</span>, d+n, k, greater&lt;<span class="keyword">int</span>&gt;()) - d;</span><br><span class="line">ll s1 = (max(j, k+<span class="number">1</span>)-(k+<span class="number">1</span>))*k + suff[max(j, k+<span class="number">1</span>)];</span><br><span class="line">ll s2 = (max(j, k)-k)*k + suff[max(j, k)];</span><br><span class="line">st[<span class="number">0</span>][k][<span class="number">0</span>] = k*(k<span class="number">-1</span>) + s1 - pref[k] + k;</span><br><span class="line">st[<span class="number">1</span>][k][<span class="number">0</span>] = k*(k<span class="number">-1</span>) + s1 - pref[k];</span><br><span class="line">st[<span class="number">2</span>][k][<span class="number">0</span>] = k*(k<span class="number">-1</span>) + s2 - pref[k<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">0</span>, <span class="number">2</span>) init(st[i]);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">per(dn, n<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n<span class="number">-1</span> &amp;&amp; d[j+<span class="number">1</span>] &gt;= dn) j++;</span><br><span class="line"><span class="keyword">if</span>((dn+pref[n<span class="number">-1</span>])%<span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(query(st[<span class="number">0</span>], <span class="number">1</span>, min(dn, j)) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"> <span class="keyword">if</span>(query(st[<span class="number">1</span>], max(<span class="number">1</span>, dn), j) &lt; -dn) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(query(st[<span class="number">2</span>], j+<span class="number">1</span>, n) &lt; dn) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cout &lt;&lt; dn &lt;&lt; " j=" &lt;&lt; j &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// printf("[%d, %d] %d\n", 1, min(dn, j), query(st[0], 1, min(dn, j)));</span></span><br><span class="line"><span class="comment">// printf("[%d, %d] %d\n", max(1, dn), j, query(st[1], dn, j));</span></span><br><span class="line"><span class="comment">// printf("[%d, %d] %d\n", j+1, n, query(st[2], j+1, n));</span></span><br><span class="line">ans[++cnt] = dn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(query(st[<span class="number">1</span>], <span class="number">1</span>, n<span class="number">-1</span>) &gt;= <span class="number">0</span>) ans[++cnt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!cnt) <span class="built_in">printf</span>(<span class="string">"-1"</span>); <span class="keyword">else</span> per(i, cnt, <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="Standard-solution"><a href="#Standard-solution" class="headerlink" title="Standard solution"></a>Standard solution</h3><p>这种几个大式子的case work实现起来是很繁琐的，debug也无比困难。于是通过<del>手玩样例，参考题解，</del>严格论证我们发现，可行的$d_n$一定是连续的一段区间（当然还要奇偶性相同）<br>这样我们就可以二分了，$O(N)$内判断Erdős–Gallai不等式要容易很多。怎么二分一个区间？只要先在$[1,n]$内找出左端点$l$，再在$[l,n]$内二分右端点即可。<br>其他细节见<a href="https://codeforces.com/blog/entry/64196" target="_blank" rel="noopener">Editorial</a>，这里贴一下std<br><figure class="highlight c++"><figcaption><span>std.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOO_SMALL -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOO_BIG 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_score</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C(N+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) ++C[A[i]];</span><br><span class="line">    ++C[value];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> less = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>; k &lt;= N; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = (i == k &amp;&amp; (i == N || A[i] &lt; value)) ? value : A[i++];</span><br><span class="line">        left += val;</span><br><span class="line">        --C[val];</span><br><span class="line">        right -= min(val, k);</span><br><span class="line">        less += C[k];</span><br><span class="line">        right += N-k-less;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right + (<span class="keyword">long</span> <span class="keyword">long</span>)(k+<span class="number">1</span>)*k) &#123;</span><br><span class="line">            <span class="keyword">return</span> (i == k) ? TOO_BIG : TOO_SMALL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">char</span>**)</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, A + i);</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(A,A+N,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">int</span> parity = sum &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = (N - parity) / <span class="number">2</span>, lores = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_score(<span class="number">2</span>*mid + parity) == TOO_SMALL) &#123;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lores = mid;</span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    lo = lores; </span><br><span class="line">    hi = (N - parity) / <span class="number">2</span>; </span><br><span class="line">    <span class="keyword">int</span> hires = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_score(<span class="number">2</span>*mid + parity) == TOO_BIG) &#123;</span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hires = mid;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (lores == <span class="number">-1</span> || hires == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>); </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lores; i &lt;= hires; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="number">2</span>*i+parity);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Codeforces Good Bye 2018中的&lt;a href=&quot;https://codeforces.com/contest/1091/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;E&lt;/a&gt;是一道阅读理解题，题面中的给出了到&lt;a href=&quot;https://en.wikipedia.org/wiki/Graph\_realization\_problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt;的链接，但比赛时我怎么有心情读一大段英文wiki…&lt;br&gt;这道题的背景知识叫&lt;strong&gt;可简单图化问题&lt;/strong&gt;(Graph Realization)，指给定一个有限序列 $D=(d_1,d_2,\cdots,d_n)$ ，是否存在一个无自环的无向图G，使得G中顶点的度数构成的序列为$D$。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://cothrax.xyz/categories/Algorithm/"/>
    
    
      <category term="Graph Theory" scheme="http://cothrax.xyz/tags/Graph-Theory/"/>
    
  </entry>
  
  <entry>
    <title>Fight Back</title>
    <link href="http://cothrax.xyz/2018/06/27/after-cee/"/>
    <id>http://cothrax.xyz/2018/06/27/after-cee/</id>
    <published>2018-06-27T09:24:31.000Z</published>
    <updated>2019-07-14T03:24:43.226Z</updated>
    
    <content type="html"><![CDATA[<style>#old-blog-link {    cursor: pointer;}</style><p>高考结束了。</p><p>掐指一算，离上一次AC也有600多天的时间了，以致东大机试时连裸的KMP都看不出来了…交大笔试也没过，自招没占到任何便宜，最后裸分出镜（捂脸<br>分数不尴不尬，卡在中间，想了想就去了UCAS。综评签了之后还跟招办老师纠缠了好久，那老师大概还没遇到过像我这么奇葩的学生…也怪我没认真看招生宣传。<br>从走进考场到查到分数，自信、焦虑、庆幸、担忧、憬然…揉在一起，最后剩下的也只是敲击键盘的平静。不过感触最深的，有两段对话。<br><a id="more"></a></p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><blockquote><p>我妈心疼我：去这个学校你就别想玩呵</p></blockquote><p>引用知乎有一个回答吧，可能有点文不对题：<br><img src="/2018/06/27/after-cee/zhihu.png" title="zhihu"></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><img src="/2018/06/27/after-cee/my_xy.jpg" title="xy"><p>谢谢你，xy~</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>旧blog的源文件放在了ubuntu上，有一次做系统时给做掉了…<br>现移到<code>/old-blog/</code>子目录下：<a onclick="location.href='/old-blog/'">戳我</a></p>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
#old-blog-link {
    cursor: pointer;
}
&lt;/style&gt;

&lt;p&gt;高考结束了。&lt;/p&gt;
&lt;p&gt;掐指一算，离上一次AC也有600多天的时间了，以致东大机试时连裸的KMP都看不出来了…交大笔试也没过，自招没占到任何便宜，最后裸分出镜（捂脸&lt;br&gt;分数不尴不尬，卡在中间，想了想就去了UCAS。综评签了之后还跟招办老师纠缠了好久，那老师大概还没遇到过像我这么奇葩的学生…也怪我没认真看招生宣传。&lt;br&gt;从走进考场到查到分数，自信、焦虑、庆幸、担忧、憬然…揉在一起，最后剩下的也只是敲击键盘的平静。不过感触最深的，有两段对话。&lt;br&gt;
    
    </summary>
    
      <category term="Nothing" scheme="http://cothrax.xyz/categories/Nothing/"/>
    
    
  </entry>
  
</feed>
