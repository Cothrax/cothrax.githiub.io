<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cothrax&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cothrax.xyz/"/>
  <updated>2019-08-12T02:41:24.723Z</updated>
  <id>http://cothrax.xyz/</id>
  
  <author>
    <name>Cothrax</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>To Luoo: 落网音乐搜索站上线</title>
    <link href="http://cothrax.xyz/2019/08/11/luoo-server/"/>
    <id>http://cothrax.xyz/2019/08/11/luoo-server/</id>
    <published>2019-08-11T09:35:38.000Z</published>
    <updated>2019-08-12T02:41:24.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>戳我访问：<a href="http://cothrax.xyz/luoo" target="_blank">http://cothrax.xyz/luoo</a></p></blockquote><p>又一年夏天，<a href="http://www.luoo.net" target="_blank" rel="noopener">落网</a>服务器下线也有半年的时间了。</p><p>去年夏天用Scrapy爬过落网所有的数据，一直想放到服务器上，但无奈在各种ddl的push下一直没能抽出时间…落的服务器虽然到期了，但大部分CDN都还活的好好的，然后用Django和ElasticSearch折腾了一通，这个落网搜索引擎就上线啦。<br><a id="more"></a></p><center><br><div style="width:80%;"><br><img src="/2019/08/11/luoo-server/screenshot.png" title="screenshot"><br></div><br></center><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><h3 id="全文搜索引擎"><a href="#全文搜索引擎" class="headerlink" title="全文搜索引擎"></a>全文搜索引擎</h3><p>支持对第1-993期的全文搜索功能（包含编号、标题、标签、文案、歌单内容）</p><center><br><div style="width:80%;"><br><img src="/2019/08/11/luoo-server/search.png" title="搜索非洲的结果"><br></div><br></center><h3 id="单曲搜索"><a href="#单曲搜索" class="headerlink" title="单曲搜索"></a>单曲搜索</h3><p>支持对期刊歌曲的独立搜索，搜索结果的列表可直接播放。例如我搜最喜欢的蝎子：</p><center><br><div style="width:80%;"><br><img src="/2019/08/11/luoo-server/scorpions.png" title="搜索scorpions的结果"><br></div><br></center><h3 id="歌曲播放及下载"><a href="#歌曲播放及下载" class="headerlink" title="歌曲播放及下载"></a>歌曲播放及下载</h3><p>注：本站没有保存任何mp3文件，所有文件来自落网CDN</p><center><br><div style="width:80%;"><br><img src="/2019/08/11/luoo-server/page_small.png" title="第734期"><br></div><br></center><p>手机端也做了一些调整：</p><center><br><div style="width:100%;"><br><img src="/2019/08/11/luoo-server/mobile.png" title="第734期"><br></div><br></center><h3 id="网易云链接"><a href="#网易云链接" class="headerlink" title="网易云链接"></a>网易云链接</h3><p>由于落网的CDN也迟早会失效，我在大部分歌曲后面提供了对应的网易云链接，单击歌名后的网易云图标即可。会有少数错误，可以评论告知我。</p><p>PS: 不知道搜什么的话，可以点随便逛逛</p><h2 id="Coming-Features"><a href="#Coming-Features" class="headerlink" title="Coming Features"></a>Coming Features</h2><ol><li>把994 - 999期补上</li><li>为没有找到网易云链接的曲目添加其他链接（如虾米、qq音乐）</li><li>（并不想做登录）</li></ol><h2 id="后记1"><a href="#后记1" class="headerlink" title="后记1"></a>后记1</h2><p>其实这件事起因于去年七夕，本来这是给xy的七夕礼物的一部分。<br>落陪伴了我的高中三年，不算长，但也保存了太多的回忆。说来挺可惜的，好好的一个落就这样消失了。不过，又一年七夕，落不在了，xy还在呀~</p><p>其实落本身做的还是太粗糙了，将近90个G的数据爬下来也挺轻松，包括那些付费期刊的资源都是摆在那的静态链接…不过出于尊重原作者劳动成果的考虑，我没有把付费的资源放上来。<br>作为一个00后，我在这短暂的二十年里却看到了互联网世界中不可思议的变化，大多创业公司都是从免费做起，积累了一定的用户后再商业化，有很多成功的案例，像Keep、Finger，但也有太多的失败，落就是其中之一吧。其实落的模式本身就是很难收费的，版权的问题总归是一个定时炸弹，情怀不能当饭吃啊。</p><p>不管怎样，最后剩下的也只有回忆呀，相信很多人也和我一样，能在落上找到很多很多曾经的记忆。其实也并没有打算做一个特别正式的东西，一方面服务器负载能力有限，另一方面自己对开发这方面也不太熟（<del>我以后大概会成为一个没用的数学家</del>）。</p><blockquote><p>这就是一个墓地吧，安安静静的，愿每一个情怀都能叶落归根。</p></blockquote><h2 id="后记2：技术细节"><a href="#后记2：技术细节" class="headerlink" title="后记2：技术细节"></a>后记2：技术细节</h2><p>其实这个小玩意也没什么技术含量吧…<br>主要我买的搬瓦工VPS的流量用不完，挂了一个Blog依然用不完…现在这个VPS上跑了一个V2***、一个Hexo、一个Django、一个ElasticSearch，真是辛苦服务器酱了呢~</p><p>后端是Django+ElasticSearch，这个挺好办，不过话说回来这么点数据用ES真是杀鸡用牛刀了。另外最新版的ElasticSearch启动就默认2G堆栈，我的VPS只有0.5G内存啊…然后强制限制到128m + 跳过bootstrap checks（没事我这个小服务器应该没人会hack我.jpg）<br>前端就很痛苦了…本来对前端了解的就不多。试来试去最后选择在我Blog的主题Even上修改，就有了现在的样式。播放功能用的AmplitudeJS，分页等的逻辑用了网上一些巨巨的代码，在此一并感谢。就算这样东拼西凑也折腾了好久，前端工程师真的不容易啊向你们致敬。<br>最后部署Django也是一个很痛苦的过程，我用的uWSGI + Nginx一开始死活连不上，最后参考了<a href="https://code.ziqiangxuetang.com/django/django-nginx-deploy.html" target="_blank" rel="noopener">这一篇</a>才解决。</p><p>既然谈到了服务器，作为一个Emacs用户，就用一个冷笑话收尾吧：</p><blockquote><p>When does an Emacs user use Vim? To change a server config via ssh. - <a href="https://swizec.com/blog/cool-thing-thursday-emacs-tramp-mode/swizec/5646" target="_blank" rel="noopener">Swizec Teller</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;戳我访问：&lt;a href=&quot;http://cothrax.xyz/luoo&quot; target=&quot;_blank&quot;&gt;http://cothrax.xyz/luoo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;又一年夏天，&lt;a href=&quot;http://www.luoo.net&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;落网&lt;/a&gt;服务器下线也有半年的时间了。&lt;/p&gt;
&lt;p&gt;去年夏天用Scrapy爬过落网所有的数据，一直想放到服务器上，但无奈在各种ddl的push下一直没能抽出时间…落的服务器虽然到期了，但大部分CDN都还活的好好的，然后用Django和ElasticSearch折腾了一通，这个落网搜索引擎就上线啦。&lt;br&gt;
    
    </summary>
    
      <category term="Developer" scheme="http://cothrax.xyz/categories/Developer/"/>
    
    
  </entry>
  
  <entry>
    <title>2019 NOWCO 多校训练</title>
    <link href="http://cothrax.xyz/2019/07/26/2019-sv-trainig/"/>
    <id>http://cothrax.xyz/2019/07/26/2019-sv-trainig/</id>
    <published>2019-07-26T07:49:04.000Z</published>
    <updated>2019-08-16T01:45:25.181Z</updated>
    
    <content type="html"><![CDATA[<p>应姚神的要求写一点比赛<ruby>总结<rp> (</rp><rt>bī bī</rt><rp>) </rp></ruby>… 还有一些<ruby>题解<rp> (</rp><rt>kǒu hú</rt><rp>) </rp></ruby>啥的。</p><blockquote><p>RMK：感觉就是个流水账。</p></blockquote><a id="more"></a><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo "></a>Todo <ruby>List<rp> (</rp><rt>Table</rt><rp>) </rp></ruby></h1><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th></tr></thead><tbody><tr><td style="text-align:center"><a href="https://ac.nowcoder.com/acm/contest/882" target="_blank" rel="noopener">二</a></td><td style="text-align:center">$\sqrt{}$</td><td style="text-align:center">$\sqrt{}$</td><td style="text-align:center"></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://ac.nowcoder.com/acm/contest/883" target="_blank" rel="noopener">三</a></td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center">WA</td><td style="text-align:center"></td><td style="text-align:center">TLE</td><td style="text-align:center">AC</td><td style="text-align:center">$\sqrt{}$</td><td style="text-align:center"></td><td style="text-align:center">$\sqrt{}$</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://ac.nowcoder.com/acm/contest/884" target="_blank" rel="noopener">四</a></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td></tr><tr><td style="text-align:center"><a href="https://ac.nowcoder.com/acm/contest/885" target="_blank" rel="noopener">五</a></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center">RE</td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://ac.nowcoder.com/acm/contest/886" target="_blank" rel="noopener">六</a></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center">$\sqrt{}$</td><td style="text-align:center">$\sqrt{}$</td><td style="text-align:center"></td><td style="text-align:center">$\sqrt{}$</td><td style="text-align:center">TLE</td><td style="text-align:center"></td><td style="text-align:center">WA</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://ac.nowcoder.com/acm/contest/887" target="_blank" rel="noopener">七</a></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center"></td><td style="text-align:center">AC</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://ac.nowcoder.com/acm/contest/889" target="_blank" rel="noopener">九</a></td><td style="text-align:center"><strong>?</strong></td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center">$\sqrt{}$</td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">AC</td></tr></tbody></table><h1 id="第一场"><a href="#第一场" class="headerlink" title="第一场"></a>第一场</h1><p>鸽了，大家都在社会实践。</p><h1 id="第二场"><a href="#第二场" class="headerlink" title="第二场"></a>第二场</h1><p>虽然还在社会实践，但我抽空看了会题。<br>先发现F是个大暴力，然而学长没有写。</p><div class="fold-code"><figure class="highlight cpp"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">31</span>;</span><br><span class="line">ll v[N][N]; <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k, ll sta, ll sum, <span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt == n) &#123; ans = max(ans, sum); <span class="keyword">return</span>;  &#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>*n-k &lt; n-cnt) <span class="keyword">return</span>;</span><br><span class="line">dfs(k+<span class="number">1</span>, sta, sum, cnt);</span><br><span class="line">ll new_sum = sum;</span><br><span class="line">rep(i, <span class="number">0</span>, <span class="number">2</span>*n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span>(i == k) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;sta) new_sum -= v[i][k];</span><br><span class="line"><span class="keyword">else</span> new_sum += v[i][k];</span><br><span class="line">dfs(k+<span class="number">1</span>, sta|(<span class="number">1</span>&lt;&lt;k), new_sum, cnt+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n);</span><br><span class="line">rep(i, <span class="number">0</span>, <span class="number">2</span>*n<span class="number">-1</span>) rep(j, <span class="number">0</span>, <span class="number">2</span>*n<span class="number">-1</span>) read(v[i][j]);</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>看到H觉得挺眼熟的，不过学长在写我就没细想。<br>结束后补了一下H复习一下单调栈。</p><div class="fold-code"><figure class="highlight cpp"><figcaption><span>H.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m; <span class="keyword">char</span> mat[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> up[N][N], l[N][N], r[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UP</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> i &gt;= <span class="number">0</span> ? up[i][j] : <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> area[<span class="number">2</span>];</span><br><span class="line">pair&lt;P, P&gt; rect[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solv</span><span class="params">(<span class="keyword">int</span> row)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> P stk[N];</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">stk[t++] = mkp(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">rep(j, <span class="number">0</span>, m<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t &amp;&amp; stk[t<span class="number">-1</span>].X &gt;= up[row][j]) t--;</span><br><span class="line">l[row][j] = t ? stk[t<span class="number">-1</span>].Y+<span class="number">1</span> : j;</span><br><span class="line">stk[t++] = mkp(up[row][j], j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t = <span class="number">0</span>;</span><br><span class="line">stk[t++] = mkp(<span class="number">0</span>, m);</span><br><span class="line">per(j, m<span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(t &amp;&amp; stk[t<span class="number">-1</span>].X &gt;= up[row][j]) t--;</span><br><span class="line">r[row][j] = t ? stk[t<span class="number">-1</span>].Y<span class="number">-1</span> : j;</span><br><span class="line">stk[t++] = mkp(up[row][j], j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(j, <span class="number">0</span>, m<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cur = (r[row][j]-l[row][j]+<span class="number">1</span>)*up[row][j];</span><br><span class="line">pair&lt;P, P&gt; tmp = mkp(mkp(row-up[row][j]+<span class="number">1</span>, l[row][j]),</span><br><span class="line">  mkp(row, r[row][j]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur &gt; area[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">area[<span class="number">1</span>] = area[<span class="number">0</span>]; rect[<span class="number">1</span>] = rect[<span class="number">0</span>];</span><br><span class="line">area[<span class="number">0</span>] = cur; rect[<span class="number">0</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rect[<span class="number">0</span>] == tmp) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cur &gt; area[<span class="number">1</span>]) area[<span class="number">1</span>] = cur, rect[<span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n); read(m);</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, mat[i]);</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) rep(j, <span class="number">0</span>, m<span class="number">-1</span>)</span><br><span class="line">up[i][j] = mat[i][j] == <span class="string">'1'</span> ? UP(i<span class="number">-1</span>, j) + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) solv(i);</span><br><span class="line"><span class="keyword">int</span> w = rect[<span class="number">0</span>].Y.X-rect[<span class="number">0</span>].X.X+<span class="number">1</span>,</span><br><span class="line">h = rect[<span class="number">0</span>].Y.Y-rect[<span class="number">0</span>].X.Y+<span class="number">1</span>,</span><br><span class="line">ans = max(area[<span class="number">1</span>], max((w<span class="number">-1</span>)*h, w*(h<span class="number">-1</span>)));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>D跟J想了一会，觉得不太可做。</p><blockquote><p>D还是挺神奇的…<br>题面应该是这场比赛中最短的了，题意是求k小团($k\leq 10^6$)。<br>从空集开始暴力BFS即可（很像dijkstra）。</p></blockquote><div class="fold-code"><figure class="highlight cpp"><figcaption><span>D.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int128 big;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, pair&lt;<span class="keyword">int</span>, big&gt;&gt; node;</span><br><span class="line"><span class="keyword">char</span> g[N][N]; <span class="keyword">int</span> n, k;</span><br><span class="line">big msk[N]; ll w[N];</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node, <span class="built_in">vector</span>&lt;node&gt;, greater&lt;node&gt; &gt; q;</span><br><span class="line"><span class="function">ll <span class="title">solv</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q.push(mkp((ll)<span class="number">0</span>, mkp(<span class="number">-1</span>, (big)<span class="number">0</span>)));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">node cur = q.top(); q.pop();</span><br><span class="line"><span class="keyword">if</span>(--k == <span class="number">0</span>) <span class="keyword">return</span> cur.X;</span><br><span class="line">rep(i, cur.Y.X+<span class="number">1</span>, n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span>((((big)<span class="number">1</span>&lt;&lt;i)&amp;cur.Y.Y) == <span class="number">0</span> &amp;&amp; (cur.Y.Y&amp;msk[i]) == cur.Y.Y)</span><br><span class="line">q.push(mkp(cur.X+w[i], mkp(i, cur.Y.Y|((big)<span class="number">1</span>&lt;&lt;i))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">read(n); read(k);</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) read(w[i]);</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, g[i]);</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) rep(j, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span>(g[i][j] == <span class="string">'1'</span>) msk[i] |= (big)<span class="number">1</span>&lt;&lt;j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, solv());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后我们爆零了???<br>赛后发现A和B是两道水题…A猜个结论，B线性递推乱搞搞。<br>E也挺有意思的，不过开始题看错了。</p><blockquote><p><strong>题意</strong>：一个$n*m$的棋盘($n\leq 50000, m\leq 10$)，某些点的状态是墙，可以左右移动或者向下移动。每次操作或询问$(1, x_i)$到$(n, y_i)$的路径方案数，或修改点$(x_i, y_i)$的状态。<br><br><br><strong>口胡</strong>：<br>记$f(i, j)$为从$(1, x_i)$出发，经过$(i-1, j)$走到$(i, j)$的方案数，很容易写出状态方程。<br>然后每一行的转移可以写成一个矩阵，将所有行的矩阵乘起来得到$M$，答案就是$M_{x_iy_i}$。<br>每次修改都只会修改所在行的矩阵，用线段树维护这些矩阵的乘积即可。</p></blockquote><div class="fold-code"><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12</span>, M = <span class="number">50010</span>;</span><br><span class="line"><span class="keyword">const</span> ll Z = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m, n, q;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll a[N][N];</span><br><span class="line">ll* <span class="keyword">operator</span> [] (<span class="keyword">int</span> idx) &#123; <span class="keyword">return</span> a[idx]; &#125;</span><br><span class="line">matrix <span class="keyword">operator</span> * (matrix b)</span><br><span class="line">&#123;</span><br><span class="line">matrix c;</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>) rep(j, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">c[i][j] = <span class="number">0</span>;</span><br><span class="line">rep(l, <span class="number">0</span>, n<span class="number">-1</span>) (c[i][j] += a[i][l]*b[l][j]%Z) %=Z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125; sgt[M*<span class="number">4</span>], w[M], id;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == e) &#123; sgt[i] = w[b]; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line">build(lc, b, mid); build(rc, mid+<span class="number">1</span>, e);</span><br><span class="line">sgt[i] = sgt[lc] * sgt[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e&lt;l || r&lt;b) <span class="keyword">return</span> id;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=b &amp;&amp; e&lt;=r) <span class="keyword">return</span> sgt[i];</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> query(lc, b, mid, l, r) * query(rc, mid+<span class="number">1</span>, e, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == e) &#123; sgt[i] = w[b]; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) modify(lc, b, mid, x); <span class="keyword">else</span> modify(rc, mid+<span class="number">1</span>, e, x);</span><br><span class="line">sgt[i] = sgt[lc] * sgt[rc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> maze[M][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> row)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lst = <span class="number">0</span>;</span><br><span class="line">rep(h, <span class="number">0</span>, n<span class="number">-1</span>) rep(l, <span class="number">0</span>, n<span class="number">-1</span>) w[row][h][l] = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(maze[row][i] == <span class="string">'1'</span>) lst = i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(i == n<span class="number">-1</span> || maze[row][i+<span class="number">1</span>] == <span class="string">'1'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// [lst, i] consecutive 0</span></span><br><span class="line">rep(h, lst, i) rep(l, lst, i) w[row][h][l] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(m); read(n); read(q);</span><br><span class="line">rep(i, <span class="number">0</span>, m<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, maze[i]), init(i);</span><br><span class="line">build(<span class="number">1</span>, <span class="number">0</span>, m<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">1</span>, q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z; read(x); read(y); read(z);</span><br><span class="line">y--; z--;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">maze[y][z] = maze[y][z] == <span class="string">'1'</span> ? <span class="string">'0'</span> : <span class="string">'1'</span>;</span><br><span class="line">init(y); modify(<span class="number">1</span>, <span class="number">0</span>, m<span class="number">-1</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(maze[<span class="number">0</span>][y] == <span class="string">'0'</span> &amp;&amp; maze[m<span class="number">-1</span>][z] == <span class="string">'0'</span>)</span><br><span class="line">ans = sgt[<span class="number">1</span>][y][z];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>J目前还不会。</p><h1 id="第三场"><a href="#第三场" class="headerlink" title="第三场"></a>第三场</h1><p>说实话，比赛体验极差，只过了签到题。<br>B还WA了一次，漏了一个初始条件。后来开了个D，找出循环节后就一直WA到比赛结束…<br>自我检讨一下：</p><ol><li>打了一年cf…不太习惯多校的出题风格</li><li>校赛后就没怎么写题，荒废了好久</li><li>刚回家比较迷糊</li></ol><p>（找了这么多借口，掩盖不了我太菜了的事实orz）</p><ol><li><strong>A</strong>：没见过，看到奇怪的区间修改想到了分块，不过想了一会不知道怎么下手。</li><li><strong>B</strong>：签到题</li><li><strong>D</strong>：小学生都知道的$1\cdots 1=\frac{10^{k+1}-1}{9}$，我当时给忘了，循环节是打表看出来的… 之后的计数一直wa，我是固定i算j的我感觉没问题啊…弃疗了（ps：标算是固定j算i的）</li><li><strong>F</strong>：$O(n^3)$枚举上下边界和右边界，然后单调队列搞一搞就好了，不过我再一次看错题，看成了$n*m$的矩阵orz</li><li><strong>H</strong>：是学长写的</li><li><strong>J</strong>：是个大模拟？早知道让队友写了…</li></ol><p><strong>补题：</strong><br>A用了根号算法的想法，记得有一篇集训队论文（2014《根号算法——不只是分块》）详细的讨论过这种做法。<br>F我的$O(n^3)$超时了…可能写的比较丑。<br><div class="fold-code"><figure class="highlight cpp"><figcaption><span>F.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;a%=p;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> max_w[N][N][N], min_w[N][N][N];</span><br><span class="line"><span class="keyword">int</span> max_q[N], min_q[N], max_i[N], min_i[N];</span><br><span class="line"><span class="keyword">int</span> n, m, a[N][N], h1, t1, h2, t2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">jud</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> max_q[h1] - min_q[h2] &lt;= m; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(h1 != t1 &amp;&amp; max_i[h1] &lt; l) h1++;</span><br><span class="line"><span class="keyword">while</span>(h2 != t2 &amp;&amp; min_i[h2] &lt; l) h2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> max_x, <span class="keyword">int</span> min_x, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(h1 != t1 &amp;&amp; max_x &gt;= max_q[t1<span class="number">-1</span>]) t1--;</span><br><span class="line"><span class="keyword">while</span>(h2 != t2 &amp;&amp; min_x &lt;= min_q[t2<span class="number">-1</span>]) t2--;</span><br><span class="line">max_q[t1] = max_x; max_i[t1++] = r;</span><br><span class="line">min_q[t2] = min_x; min_i[t2++] = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line"><span class="keyword">int</span> T; read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">read(n); read(m);</span><br><span class="line">rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, n) read(a[i][j]);</span><br><span class="line">rep(i, <span class="number">1</span>, n) rep(up, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line">max_w[i][up][up] = min_w[i][up][up] = a[up][i];</span><br><span class="line">rep(dn, up+<span class="number">1</span>, n)</span><br><span class="line">max_w[i][up][dn] = max(max_w[i][up][dn<span class="number">-1</span>], a[dn][i]),</span><br><span class="line">min_w[i][up][dn] = min(min_w[i][up][dn<span class="number">-1</span>], a[dn][i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">rep(up, <span class="number">1</span>, n) rep(dn, up, n)</span><br><span class="line">&#123;</span><br><span class="line">h1 = t1 = h2 = t2 = <span class="number">0</span>; <span class="keyword">int</span> l = <span class="number">1</span>;</span><br><span class="line">rep(r, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line">ins(max_w[r][up][dn], min_w[r][up][dn], r);</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r &amp;&amp; !jud()) upd(++l);</span><br><span class="line">ans = max(ans, (r-l+<span class="number">1</span>)*(dn-up+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>G其实挺简单的…分治一下就好了，不过开始写了个朴素的分治T了。</p><blockquote><p><strong>题意</strong>：给定数列$a_1, …, a_n$，求满足$sum(a_l\cdots a_r)\geq 2*max(a_l\cdots a_r)~(l\leq r)$ 的$(l, r)$的个数。($n\leq 3\times 10^5$)<br><br><br>分治一波：对区间$[l, r]$，找到$a_l\cdots a_r$中的最大值，记为$a_{mid}$</p><ol><li>然后处理[l, r]中包含$a_{mid}$的区间，这样就固定了max值；</li><li>之后递归处理$[l, mid-1]$和$[mid+1, r]$即可。</li></ol><p>第1步用$O(n)$的做法是会T的（如双指针），比如$a$如果是递增的，整个复杂度就$O(n^2)$了。<br>考虑枚举$[l, mid]$和$[mid, r]$中长度较短的区间，然后对另一个区间二分，这样的话，就是$O(n\log^2{n})$的了。<br>另：找$a_{mid}$的过程可以用线段树或者st表。</p></blockquote><div class="fold-code"><figure class="highlight cpp"><figcaption><span>G.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;a%=p;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n; ll a[N], pref[N], suff[N];</span><br><span class="line"></span><br><span class="line">ll ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll sgt[N*<span class="number">4</span>]; <span class="keyword">int</span> idx[N*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e, ll *w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == e) &#123; sgt[i] = w[b]; idx[i] = b; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line">build(lc, b, mid, w); build(rc, mid+<span class="number">1</span>, e, w);</span><br><span class="line">sgt[i] = max(sgt[lc], sgt[rc]);</span><br><span class="line">idx[i] = sgt[i] == sgt[lc] ? idx[lc] : idx[rc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Pll <span class="title">query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e&lt;l || r&lt;b) <span class="keyword">return</span> mkp(<span class="number">0</span>, -INF);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=b &amp;&amp; e&lt;=r) <span class="keyword">return</span> mkp(idx[i], sgt[i]);</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line">P la = query(lc, b, mid, l, r), ra = query(rc, mid+<span class="number">1</span>, e, l, r);</span><br><span class="line"><span class="keyword">return</span> la.Y &gt; ra.Y ? la : ra;</span><br><span class="line">&#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc_r</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i, mid, r)</span><br><span class="line">&#123;</span><br><span class="line">ll up = pref[i] - <span class="number">2</span>*a[mid];</span><br><span class="line"><span class="keyword">int</span> j = upper_bound(pref+l<span class="number">-1</span>, pref+mid, up) - pref + <span class="number">1</span>;</span><br><span class="line">ans += j-l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc_l</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i, l, mid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// lst j, pref[j] &lt; pref[i] + 2x</span></span><br><span class="line">ll up = pref[i<span class="number">-1</span>] + <span class="number">2</span>*a[mid], j = mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> b = mid, e = r;</span><br><span class="line"><span class="keyword">while</span>(b &lt;= e)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> m = (b+e)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pref[m] &lt; up) j = m, b = m+<span class="number">1</span>; <span class="keyword">else</span> e = m<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans += r-j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solv</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">Pll tmp = t.query(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line"><span class="keyword">int</span> mid = tmp.X;</span><br><span class="line"><span class="keyword">if</span>(r-mid &gt; mid-l) calc_l(l, r, mid); <span class="keyword">else</span> calc_r(l, r, mid);</span><br><span class="line">solv(l, mid<span class="number">-1</span>); solv(mid+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("std.in", "r", stdin);</span></span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T; read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">read(n);</span><br><span class="line">rep(i, <span class="number">1</span>, n) read(a[i]);</span><br><span class="line">t.build(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">pref[<span class="number">0</span>] = suff[n+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">1</span>, n) pref[i] = pref[i<span class="number">-1</span>] + a[i];</span><br><span class="line">per(i, n, <span class="number">1</span>) suff[i] = suff[i+<span class="number">1</span>] + a[i];</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">solv(<span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><strong>立一个flag</strong>：第四场认真打<br>谨记：</p><ol><li>认真读题</li><li>如果有想法要多想想</li><li>卡住的时候可以尝试枚举几个量、更换枚举项</li><li>运用19年来学习的数学技巧orz</li></ol></blockquote><h1 id="第四场"><a href="#第四场" class="headerlink" title="第四场"></a>第四场</h1><blockquote><p>Update： flag倒了</p></blockquote><p>讲道理这一场的游戏体验还行，感觉都能写一点。</p><p>先写了E，不过wa了一次；然后刚想暴力分层跑J，但一想感觉会T，就扔给学长了；然后开始写B，暴力一发T了，开始yy离线分治，但发现自己不会求两组线性基的交；然后写A和D，乱搞搞就过了；然后觉得还有时间开了C，觉得分治+线段树可做，但线段树写挂了…然后也没时间修B了，就弃疗了。</p><p>赛后发现我solo了…但我太菜了solo不动啊orz。每场都三百名开外…没脸见人了。</p><p><strong>补题：</strong><br>发现J暴力分层可以过…<br><div class="fold-code"><figure class="highlight cpp"><figcaption><span>J.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;a%=p;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I(i, u) ((i)*n+(u))</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">10</span>, M = <span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> v, nxt; ll w; &#125; g[N*<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> head[N], sz = <span class="number">0</span>;</span><br><span class="line">pair&lt;P, ll&gt; edg[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// printf("%d-%d %d\n", u, v, w);</span></span><br><span class="line">g[++sz].w = w; g[sz].v = v;</span><br><span class="line">g[sz].nxt = head[u]; head[u] = sz;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> used[N]; ll d[N];</span><br><span class="line"><span class="function">ll <span class="title">dij</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// printf("dij: %d-&gt;%d\n", s, t);</span></span><br><span class="line">priority_queue&lt;Pll, <span class="built_in">vector</span>&lt;Pll&gt;, greater&lt;Pll&gt; &gt; q;</span><br><span class="line">fill(used, used + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">fill(d, d + n + <span class="number">1</span>, INF);</span><br><span class="line">d[s] = <span class="number">0</span>; q.push(make_pair(<span class="number">0</span>, s));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = q.top().second; q.pop();</span><br><span class="line"><span class="keyword">if</span>(used[u]) <span class="keyword">continue</span>; used[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u], v; i; i = g[i].nxt)</span><br><span class="line"><span class="keyword">if</span>(d[v = g[i].v] &gt; d[u] + g[i].w)</span><br><span class="line">&#123;</span><br><span class="line">d[v] = d[u] + g[i].w;</span><br><span class="line">q.push(make_pair(d[v], v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">ll g0[M][M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line"><span class="keyword">int</span> S, T, k;</span><br><span class="line">read(n); read(m); read(S); read(T); read(k);</span><br><span class="line">rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, n) g0[i][j] = INF;</span><br><span class="line">rep(i, <span class="number">1</span>, m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, v; ll w; read(u); read(v); read(w);</span><br><span class="line">g0[v][u] = g0[u][v] = min(g0[u][v], w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">1</span>, n) rep(j, i+<span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">if</span>(g0[i][j] != INF) edg[++tot] = mkp(mkp(i, j), g0[i][j]);</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">0</span>, k)</span><br><span class="line">rep(j, <span class="number">1</span>, tot)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = edg[j].X.X, v = edg[j].X.Y; ll w = edg[j].Y;</span><br><span class="line">add(I(i, u), I(i, v), w);</span><br><span class="line">add(I(i, v), I(i, u), w);</span><br><span class="line"><span class="keyword">if</span>(i &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">add(I(i, u), I(i+<span class="number">1</span>, v), <span class="number">0</span>);</span><br><span class="line">add(I(i, v), I(i+<span class="number">1</span>, u), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, dij((k+<span class="number">1</span>)*n, I(<span class="number">0</span>, S), I(k, T)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>发现C直接分治不用线段树…<br><div class="fold-code"><figure class="highlight cpp"><figcaption><span>C.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;a%=p;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n; ll a[N], b[N], pref[N], suff[N];</span><br><span class="line"></span><br><span class="line">ll ans = -INF;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> w(i) max(i-l, r-i)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solv</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>; </span><br><span class="line">ll x = a[l]; <span class="keyword">int</span> mid = l;</span><br><span class="line">rep(i, l+<span class="number">1</span>, r)</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt; a[mid] || (a[i] == a[mid] &amp;&amp; w(i) &lt; w(mid)))</span><br><span class="line">x = a[i], mid = i;</span><br><span class="line">ll s1 = <span class="number">0</span>, s2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">per(i, mid<span class="number">-1</span>, l) s1 = max(s1, suff[i]-suff[mid]);</span><br><span class="line">rep(i, mid+<span class="number">1</span>, r) s2 = max(s2, pref[i]-pref[mid]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">per(i, mid<span class="number">-1</span>, l) s1 = min(s1, suff[i]-suff[mid]);</span><br><span class="line">rep(i, mid+<span class="number">1</span>, r) s2 = min(s2, pref[i]-pref[mid]);</span><br><span class="line">&#125;</span><br><span class="line">ans = max(ans, x*(s1+s2+b[mid]));</span><br><span class="line">solv(l, mid<span class="number">-1</span>); solv(mid+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n);</span><br><span class="line">rep(i, <span class="number">1</span>, n) read(a[i]);</span><br><span class="line">rep(i, <span class="number">1</span>, n) read(b[i]);</span><br><span class="line">rep(i, <span class="number">1</span>, n) pref[i] = pref[i<span class="number">-1</span>] + b[i];</span><br><span class="line">per(i, n, <span class="number">1</span>) suff[i] = suff[i+<span class="number">1</span>] + b[i];</span><br><span class="line"></span><br><span class="line">solv(<span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>数据是谁出的我要打死他&gt;_&lt;</p><p>B的话可以线性基求交+线段树，离线分治会T。<br>其实我线段树开始也T了，因为很执着地想把整个区间的线性基的交求出来再判断。<br>其实线段树查询的过程中是不用求交($O(n^2)$)的，对于每个小区间判断一下($O(n)$)即可。<br>离线分治因为只将每个区间拆成两个，而且冗余的求交次数太多，所以只能过90%。<br>求交部分代码：（其实我还不太懂）</p><figure class="highlight cpp"><figcaption><span>intersect</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intersect</span><span class="params">(uint *a, uint *b, uint *ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fill(ans, ans+up, <span class="number">0</span>);</span><br><span class="line">uint c[K], d[K];</span><br><span class="line">rep(i, <span class="number">0</span>, up<span class="number">-1</span>) c[i] = d[i] = b[i];</span><br><span class="line">rep(i, <span class="number">0</span>, up<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">uint x = a[i];</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> j = i; uint T = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line"><span class="keyword">if</span>((x&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[j]) x ^= c[j], T ^= d[j];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!x) ans[i] = T; <span class="keyword">else</span> c[j] = x, d[j] = T;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>离线分治：<br><div class="fold-code"><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;a%=p;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>, K = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> up = <span class="number">32</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, uint *a, uint *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i, <span class="number">1</span>, n) per(j, up<span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>((a[i]&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[j]) a[i] ^= b[j];</span><br><span class="line"><span class="keyword">else</span> &#123; b[j] = a[i]; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">uint bs[N][K], its[N][K];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(uint *b, uint x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">per(i, up<span class="number">-1</span>, <span class="number">0</span>) <span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>) x ^= b[i];</span><br><span class="line"><span class="keyword">return</span> x == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intersect</span><span class="params">(uint *a, uint *b, uint *ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fill(ans, ans+up, <span class="number">0</span>);</span><br><span class="line">uint c[K], d[K];</span><br><span class="line">rep(i, <span class="number">0</span>, up<span class="number">-1</span>) c[i] = d[i] = b[i];</span><br><span class="line">rep(i, <span class="number">0</span>, up<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">uint x = a[i];</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> j = i; uint T = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line"><span class="keyword">if</span>((x&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[j]) x ^= c[j], T ^= d[j];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!x) ans[i] = T; <span class="keyword">else</span> c[j] = x, d[j] = T;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> l, r; uint x; &#125; ask[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pool[N];</span><br><span class="line"><span class="keyword">bool</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solv</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">foreach(i, pool[l]) <span class="keyword">if</span>(ask[*i].r == l)</span><br><span class="line">ans[*i] = check(bs[l], ask[*i].x);</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; stk;</span><br><span class="line">rep(i, l, mid) foreach(j, pool[i])</span><br><span class="line"><span class="keyword">if</span>(ask[*j].r &gt; mid &amp;&amp; ask[*j].r &lt;= r) stk.pb(*j);</span><br><span class="line">uint tmp[K];</span><br><span class="line">rep(i, <span class="number">0</span>, up<span class="number">-1</span>) tmp[i] = (uint)<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">per(i, mid, l) intersect(i==mid ? tmp : its[i+<span class="number">1</span>], bs[i], its[i]);</span><br><span class="line">rep(i, mid+<span class="number">1</span>, r) intersect(i==mid+<span class="number">1</span> ? tmp : its[i<span class="number">-1</span>], bs[i], its[i]);</span><br><span class="line"></span><br><span class="line">foreach(i, stk)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// intersect(its[ask[*i].l], its[ask[*i].r], tmp);</span></span><br><span class="line">ans[*i] = check(its[ask[*i].l], ask[*i].x) &amp;&amp;</span><br><span class="line">check(its[ask[*i].r], ask[*i].x);</span><br><span class="line">&#125;</span><br><span class="line">solv(l, mid); solv(mid+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("std.in", "r", stdin);</span></span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n); read(m);</span><br><span class="line">uint tmp[K];</span><br><span class="line">rep(i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sz; read(sz);</span><br><span class="line">rep(j, <span class="number">1</span>, sz) read(tmp[j]);</span><br><span class="line">gauss(sz, tmp, bs[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">1</span>, m)</span><br><span class="line">&#123;</span><br><span class="line">read(ask[i].l); read(ask[i].r); read(ask[i].x);</span><br><span class="line">pool[ask[i].l].pb(i);</span><br><span class="line">&#125;</span><br><span class="line">solv(<span class="number">1</span>, n);</span><br><span class="line">rep(i, <span class="number">1</span>, m) <span class="built_in">printf</span>(ans[i] ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>线段树：<br><div class="fold-code"><figure class="highlight cpp"><figcaption><span>B.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;a%=p;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span>, K = <span class="number">35</span>;</span><br><span class="line"><span class="keyword">int</span> up = <span class="number">32</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gauss</span><span class="params">(<span class="keyword">int</span> n, uint *a, uint *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i, <span class="number">1</span>, n) per(j, up<span class="number">-1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>((a[i]&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[j]) a[i] ^= b[j];</span><br><span class="line"><span class="keyword">else</span> &#123; b[j] = a[i]; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">uint bs[N][K], its[N][K];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(uint *b, uint x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">per(i, up<span class="number">-1</span>, <span class="number">0</span>) <span class="keyword">if</span>((x&gt;&gt;i)&amp;<span class="number">1</span>) x ^= b[i];</span><br><span class="line"><span class="keyword">return</span> x == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">intersect</span><span class="params">(uint *a, uint *b, uint *ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fill(ans, ans+up, <span class="number">0</span>);</span><br><span class="line">uint c[K], d[K];</span><br><span class="line">rep(i, <span class="number">0</span>, up<span class="number">-1</span>) c[i] = d[i] = b[i];</span><br><span class="line">rep(i, <span class="number">0</span>, up<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">uint x = a[i];</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> j = i; uint T = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line"><span class="keyword">if</span>((x&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c[j]) x ^= c[j], T ^= d[j];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!x) ans[i] = T; <span class="keyword">else</span> c[j] = x, d[j] = T;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">uint sgt[N*<span class="number">4</span>][K];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b == e)</span><br><span class="line">&#123;</span><br><span class="line">rep(j, <span class="number">0</span>, up<span class="number">-1</span>) sgt[i][j] = bs[b][j];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line">build(lc, b, mid); build(rc, mid+<span class="number">1</span>, e);</span><br><span class="line">intersect(sgt[lc], sgt[rc], sgt[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> b, <span class="keyword">int</span> e, <span class="keyword">int</span> l, <span class="keyword">int</span> r, uint x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e&lt;l || r&lt;b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=b &amp;&amp; e&lt;=r) <span class="keyword">return</span> check(sgt[i], x);</span><br><span class="line"><span class="keyword">int</span> mid = (b+e)&gt;&gt;<span class="number">1</span>, lc = i&lt;&lt;<span class="number">1</span>, rc = lc|<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> query(lc, b, mid, l, r, x) &amp;&amp;</span><br><span class="line">query(rc, mid+<span class="number">1</span>, e, l, r, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125; t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// freopen("std.in", "r", stdin);</span></span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n); read(m);</span><br><span class="line">uint tmp[K];</span><br><span class="line">rep(i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> sz; read(sz);</span><br><span class="line">rep(j, <span class="number">1</span>, sz) read(tmp[j]);</span><br><span class="line">gauss(sz, tmp, bs[i]);</span><br><span class="line">&#125;</span><br><span class="line">t.build(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">1</span>, m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l, r, x;</span><br><span class="line">read(l); read(r); read(x);</span><br><span class="line"><span class="built_in">printf</span>(t.query(<span class="number">1</span>, <span class="number">1</span>, n, l, r, x) ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>I是个后缀自动机？有时间学一下再写。</p><h1 id="第五场"><a href="#第五场" class="headerlink" title="第五场"></a>第五场</h1><p>这次训练已经过半了，不过好像水平并没有什么长进…</p><p>开场秒了A，B扔给了学长，花了一个小时写G，刚写完发现subsequence看成了substring，弃疗。学长用高精度做的B超时了，我想了想乱搞了一个十进制快速幂，少取几次模就过了。因为前一天刚拔了两颗牙脑子不太转的动，之后就划了两小时的水。</p><h1 id="第六场"><a href="#第六场" class="headerlink" title="第六场"></a>第六场</h1><p>写了A和B，学长的开了D然后wa了，然后学长开了J却一直没有动静，我就自闭了…</p><p>赛后发现D不单调，G是个大暴力，E构造，H挺有意思的。</p><blockquote><p>E：构造一个n个节点的self-complementary的图</p></blockquote><blockquote>H：一个n个节点，m条边的无向图，边权均为1，一个点集$S_a$，一个点集$S_b$，随机从$S_a$中取一点$A$，从$S_b$中取一点$B$，从所有点中取一点$C$，记$f(A, B, C)=min_v\{dist(A,v)+dist(B,v)+dist(C,v)\}$，求f的期望$n,m\leq 10^5, |S_a|,|S_b|\leq 20$<p><br><br>枚举A和B，添加一点S，对于每个点v，记$w(S,v)=dist(A,v)+dist(B,v)$。则对任意一点C，$f(A, B, C)=dist(C, S)$， 因为边权都是1，再用bfs优化一下。</p></blockquote><h1 id="第七场"><a href="#第七场" class="headerlink" title="第七场"></a>第七场</h1><p>这是我们最靠前的一场？不过签完到后就一直处于智障模式，B考了个方程求根的板子。C写了个主席树…然后突然想起来实数域上三次以上都可约，没脸见线代老师了orz。后来开了H想了好久无果，学长写E写自闭了，然后就没有了。</p><p>赛后发现E离散化一下就可以用线段树了，H是个数位dp（跟我以前写的数位dp不太一样orz），果然还是我dp太烂了唉。</p><p> H：求$1\leq x\leq A,1\leq y\leq B$，满足$x~and~y&lt;C$或$x~xor~y&gt;C$的$(x,y)$的个数。<br><br><br>从高到低做二进制位，核心在于<strong>如果某一位已经满足了一个限制条件，再低的位就没有限制了</strong>。比如A=1101, x=10??，由于在第3位0&lt;1，x的后两位可以随便填。<br>这样把四个限制条件全考虑进状态，dp一下即可</p><div class="fold-code"><figure class="highlight cpp"><figcaption><span>H.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forG(i) for(int i = head[u], v; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;a%=p;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">35</span>;</span><br><span class="line">ll f[N][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">ll A, B, C;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> c1, <span class="keyword">int</span> c2, <span class="keyword">int</span> l1, <span class="keyword">int</span> l2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(f[i][c1][c2][l1][l2] != <span class="number">-1</span>) <span class="keyword">return</span> f[i][c1][c2][l1][l2];</span><br><span class="line">ll ret = <span class="number">0</span>;</span><br><span class="line">rep(x, <span class="number">0</span>, l1 ? ((A&gt;&gt;i)&amp;<span class="number">1</span>) : <span class="number">1</span>) rep(y, <span class="number">0</span>, l2 ? ((B&gt;&gt;i)&amp;<span class="number">1</span>) : <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nd = x&amp;y, xr = x^y;</span><br><span class="line"><span class="keyword">int</span> n_l1 = l1 &amp;&amp; (x == ((A&gt;&gt;i)&amp;<span class="number">1</span>)),</span><br><span class="line">n_l2 = l2 &amp;&amp; (y == ((B&gt;&gt;i)&amp;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">int</span> n_c1 = <span class="number">1</span>, n_c2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!c1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(nd == ((C&gt;&gt;i)&amp;<span class="number">1</span>)) n_c1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(nd &gt; ((C&gt;&gt;i)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!c2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(xr == ((C&gt;&gt;i)&amp;<span class="number">1</span>)) n_c2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(xr &lt; ((C&gt;&gt;i)&amp;<span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printf("&gt;&gt;%d x=%d y=%d\n", i, x, y);</span></span><br><span class="line">ret += dfs(i<span class="number">-1</span>, n_c1, n_c2, n_l1, n_l2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// printf("f[%d][%d][%d][%d][%d] = %lld\n", i, c1, c2, l1, l2, ret);</span></span><br><span class="line"><span class="keyword">return</span> f[i][c1][c2][l1][l2] = ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">// freopen("std.out", "w", stdout);</span></span><br><span class="line"><span class="keyword">int</span> T; read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">read(A); read(B); read(C);</span><br><span class="line"><span class="keyword">int</span> len = max(<span class="built_in">ceil</span>(log2(A)), <span class="built_in">ceil</span>(log2(B)));</span><br><span class="line">len = max(len, (<span class="keyword">int</span>)<span class="built_in">ceil</span>(log2(C)));</span><br><span class="line">rep(i, <span class="number">0</span>, len) rep(c1, <span class="number">0</span>, <span class="number">1</span>) rep(c2, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">rep(l1, <span class="number">0</span>, <span class="number">1</span>) rep(l2, <span class="number">0</span>, <span class="number">1</span>) f[i][c1][c2][l1][l2] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ll res = dfs(len, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>) - max(A-C+<span class="number">1</span>, <span class="number">0l</span>l) - max(B-C+<span class="number">1</span>, <span class="number">0l</span>l);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, A*B - res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="第八场"><a href="#第八场" class="headerlink" title="第八场"></a>第八场</h1><p>我有个饭局，鸽了。</p><h1 id="第九场"><a href="#第九场" class="headerlink" title="第九场"></a>第九场</h1><p>这场也太数学了吧。</p><ol><li>A比较懵；</li><li>B用求根公式，抄个二次剩余的板子开根就可以过。</li><li>D是个裸的折半枚举。</li><li>E用并查集维护一下连通块，然后是求所有连通块大小的一个4次对称多项式，对称多项式不太好维护，维护等幂和比较方便，然后在用牛顿恒等式算一下就行，窝推了好久…对不起线代老师orz。</li><li>J我猜想最优解的对称轴一定在某一行的中点，然后把所有中点排个序，扫一遍乱搞搞就好了。</li></ol><p>然后H不太会就自闭了，发现学长的D不知道为啥写挂了…后来我就下线了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应姚神的要求写一点比赛&lt;ruby&gt;总结&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;bī bī&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;… 还有一些&lt;ruby&gt;题解&lt;rp&gt; (&lt;/rp&gt;&lt;rt&gt;kǒu hú&lt;/rt&gt;&lt;rp&gt;) &lt;/rp&gt;&lt;/ruby&gt;啥的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RMK：感觉就是个流水账。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://cothrax.xyz/categories/Algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>Graph Realization Problem</title>
    <link href="http://cothrax.xyz/2019/01/10/graph-realization-problem/"/>
    <id>http://cothrax.xyz/2019/01/10/graph-realization-problem/</id>
    <published>2019-01-10T14:42:44.000Z</published>
    <updated>2019-07-31T04:13:56.156Z</updated>
    
    <content type="html"><![CDATA[<p>Codeforces Good Bye 2018中的<a href="https://codeforces.com/contest/1091/problem/E" target="_blank" rel="noopener">E</a>是一道阅读理解题，题面中的给出了到<a href="https://en.wikipedia.org/wiki/Graph\_realization\_problem" target="_blank" rel="noopener">wiki</a>的链接，但比赛时我怎么有心情读一大段英文wiki…<br>这道题的背景知识叫<strong>可简单图化问题</strong>(Graph Realization)，指给定一个有限序列 $D=(d_1,d_2,\cdots,d_n)$ ，是否存在一个无自环的无向图G，使得G中顶点的度数构成的序列为$D$。</p><blockquote><p>RMK (2019-06-24)：原来这是离散数学的作业题…</p></blockquote><a id="more"></a><h1 id="Havel-Hakimi-Algorithm"><a href="#Havel-Hakimi-Algorithm" class="headerlink" title="Havel-Hakimi Algorithm"></a>Havel-Hakimi Algorithm</h1><p><strong>定理</strong>：令$D=(d_1,\cdots,d_n)$，其中$d_1\geq d_2 \geq\cdots\geq d_n$，$D$是可简单图化的当且仅当$D’=(d_2-1,d_3-1,\cdots,d_{d_1+1}-1,d_{d_1+2},\cdots,d_n)$非负且是可简单化的。</p><h2 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h2><p>$\Leftarrow)$ 这个定理的充分性是显然的。<br>设$d_i$对应的节点是$v_i$，对n归纳，当我们得到了$D’$对应的图$G’$，将$v_1$与$G’$中的$v_2,\cdots,v_{d_1+1}$连边，就构造出了$G$</p><p>$\Rightarrow)$ 要证明这个条件的必要性，考虑若已有一个图$G$，能否构造出$G’$。<br>记$S=\{u|(u, v_1)\in G\},\ T=\{v_j|2\leq j\leq d_1+1\}$</p><ol><li>如果$S=T$，那么删去$v_1$及$v_1$和$S$间的边，就得到了$G’$</li><li>否则，存在$v_p\in T,\ v_q\not\in T$，使得$v_p\not\in S,\ v_q\in S$<br>因为$d_p\geq d_q$，所以又存在一个不同的点$z$，使得$v_p$和$z$相邻，$v_q$和$z$不相邻，那么我们删去$(v_p,z)$和$(v_1,v_q)$，添加$(v_1,v_p)$和$v_q,z$，这样保持$v_q$的度数不变，并把$v_p$加到$S$中。<br>重复2的过程，因为$|S|=|T|=d_1$，总会使得$S=T$，这是我们就回到了情况1。</li></ol><h2 id="Implementation-poj-1659"><a href="#Implementation-poj-1659" class="headerlink" title="Implementation - poj 1659"></a>Implementation - poj 1659</h2><p>这是一道水题，给定一个序列，问是否可以简单图化，如果能的话输出任一方案。<br>Havel算法的实现就是，迭代$d_i$，$d_{i+1},…,d_{i+d_1}$都减去1，如果过程中出现负数就无解，最后$d_n=0$就有解，否则无解。复杂度$O(N^2logN)$，方案按照充分性的证明构造即可。</p><div><script>enable_magic("#magic216365352",1,42);</script><div id="magic216365352"><figure class="highlight cpp"><figcaption><span>poj1659.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forg(i) for(int i = head[u]; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n, g[N][N]; P a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"std.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line"><span class="comment">//freopen("std.out", "w", stdout);</span></span><br><span class="line"><span class="keyword">int</span> T; read(T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line">&#123;</span><br><span class="line">read(n); rep(i, <span class="number">1</span>, n) read(a[i].X), a[i].Y = i;</span><br><span class="line">rep(i, <span class="number">1</span>, n) rep(j, <span class="number">1</span>, n) g[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flg = <span class="number">1</span>;</span><br><span class="line">rep(i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line">sort(a+i, a+n+<span class="number">1</span>, greater&lt;P&gt;());</span><br><span class="line"><span class="keyword">if</span>(a[n].X&lt;<span class="number">0</span> || i+a[i].X&gt;n) &#123; flg = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span>(a[i].X == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">rep(j, i+<span class="number">1</span>, i+a[i].X)</span><br><span class="line">&#123;</span><br><span class="line">g[a[i].Y][a[j].Y] = g[a[j].Y][a[i].Y] = <span class="number">1</span>;</span><br><span class="line">a[j].X--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">rep(i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line">rep(j, <span class="number">1</span>, n) <span class="built_in">printf</span>(<span class="string">"%d "</span>, g[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="Erdos–Gallai-theorem"><a href="#Erdos–Gallai-theorem" class="headerlink" title="Erdős–Gallai theorem"></a>Erdős–Gallai theorem</h1><p>另一个定理给出了可简单图化的不等式条件，给定序列$D=(d_1,d_2,\cdots,d_n)$，其中$d_1\geq d_2 \geq\cdots\geq d_n$，$D$可简单图化当且仅当<br>$$\sum_{i=1}^{k}d_i\leq k(k-1)+\sum_{i=k+1}^n min(d_i,k)$$<br>对任意$1\leq k\leq n$成立</p><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2>这个定理的必要性是显然的，式子左边是$S=\{d_1,d_2,...,d_k\}$的度数和，右边第一项是$S$中连边的最大贡献，第二项是$S$与$G\setminus S$间连边的最大贡献。<p>充分性的证明有很多种，也要复杂的多，其中一种构造的证法见：<a href="https://www.sciencedirect.com/science/article/pii/S0012365X09004683" target="_blank" rel="noopener">A short constructive proof of the Erdős–Gallai characterization of graphic lists</a></p><h2 id="Implementation-cf-1091E"><a href="#Implementation-cf-1091E" class="headerlink" title="Implementation - cf 1091E"></a>Implementation - cf 1091E</h2><p>这就是楔子中提到的阅读理解题，题意为：<br>给定$(d_1,d_2,d_3,…,d_n)$，求所有可能的$d_{n+1}$，使得$(d_1,d_2,\cdots,d_{n+1})$可简单图化。<br>$1\leq n\leq 500000$</p><h3 id="My-solution"><a href="#My-solution" class="headerlink" title="My solution"></a>My solution</h3><blockquote><p>RMK：下面的$n$均$+1$，就是说给定$d_1,d_2,\cdots,d_{n-1}$，要确定的是$d_n$</p></blockquote><p>首先由握手定理可以确定$d_n$的奇偶性。<br>考虑Erdős–Gallai定理，先将序列降序排列，对于给定$d_n$，记$d_j\leq d_n\leq d_{j+1}$</p><ol><li>当$k\geq j+1$时，$d_n$在式子的左边，分离变量得式$(1)$<br>$$d_n\leq k(k-1)+\sum_{i=k}^{n-1} min(d_i,k)-\sum_{i=1}^{k-1}d_i$$</li><li>当$1\leq k \leq j$时，$d_n$在式子的右边，变形后<br>$$0\leq k(k-1)+\sum_{i=k+1}^{n-1} min(d_i,k)-\sum_{i=1}^{k}d_i+min(d_n,k)$$<ul><li>当$k\leq d_n$时，变成式$(2)$<br>$$0\leq k(k-1)+\sum_{i=k+1}^{n-1} min(d_i,k)-\sum_{i=1}^{k}d_i+k$$</li><li>当$k&gt;d_n$时，分离变量得到式$(3)$<br>$$-d_n\leq k(k-1)+\sum_{i=k+1}^{n-1} min(d_i,k)-\sum_{i=1}^{k}d_i$$</li></ul></li></ol><p>注意到不等式$(1)(2)(3)$右边的部分都只与$k$有关，可以通过二分+前后缀和预处理出来，并建st表。然后枚举$d_n$，分$[1,min(d_n,j)],\ [max(1,d_n),j],\ [j+1,n]$三个区间判断$(2)(3)(1)$即可。</p><p>注意st表空间可能比较吃紧，还有$d_n=0$最好特判一下。</p><div><script>enable_magic("#magic2502041749",1,42);</script><div id="magic2502041749"><figure class="highlight cpp"><figcaption><span>E.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, l, r) for(int i = (l); i &lt;= (r); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> per(i, r, l) for(int i = (r); i &gt;= (l); i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> foreach(i, x) for(auto i = x.begin(); i != x.end(); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> forg(i) for(int i = head[u]; i; i = g[i].nxt)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (ll)0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EPS 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp(x, y) make_pair(x, y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb(x) push_back(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lbound lower_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ubound upper_bound</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rnd(x) (rand()%(x)+1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> squ(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp0(A)&#123;foreach(i,A)cout&lt;&lt;A[i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp(A, l, r) &#123;rep(_i,l,r)cout&lt;&lt;A[_i]&lt;&lt;<span class="meta-string">" "</span>;cout&lt;&lt;endl;&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> disp2(A, l, r, b, e)&#123;\</span></span><br><span class="line">rep(_i,l,r)&#123;rep(_j,b,e)<span class="built_in">cout</span>&lt;&lt;A[_i][_j]&lt;&lt;<span class="string">"\t"</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;&#125;\</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, <span class="keyword">int</span>&gt; Pli;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, ll&gt; Pil;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; Pll;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">lowbit</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span><span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">T</span> <span class="title">gcd</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>) &#123;</span><span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">Pow</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>, <span class="title">T</span> <span class="title">p</span>)</span></span><br><span class="line"><span class="class">&#123;</span>T ret=<span class="number">1</span>;<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)(ret*=a)%=p;<span class="keyword">return</span> ret;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">ret</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">ret = x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line">ll n, pref[N], suff[N]; <span class="keyword">int</span> d[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ll st[][<span class="number">20</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lgn = <span class="built_in">ceil</span>(log2(n));</span><br><span class="line">rep(j, <span class="number">1</span>, lgn) rep(i, <span class="number">1</span>, n)</span><br><span class="line">&#123;</span><br><span class="line">st[i][j] = st[i][j<span class="number">-1</span>]; <span class="keyword">int</span> k = i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">if</span>(k &lt;= n) st[i][j] = min(st[i][j], st[k][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll st[][<span class="number">20</span>], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">int</span> len = r-l+<span class="number">1</span>, t = log2(len);</span><br><span class="line"><span class="keyword">return</span> min(st[l][t], st[r-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>][t]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">ll st[<span class="number">3</span>][N][<span class="number">20</span>]; <span class="keyword">int</span> ans[N], cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("std.in", "r", stdin);</span></span><br><span class="line"><span class="comment">//freopen("std.out", "w", stdout);</span></span><br><span class="line">read(n); n++;</span><br><span class="line">rep(i, <span class="number">1</span>, n<span class="number">-1</span>) read(d[i]);</span><br><span class="line">sort(d+<span class="number">1</span>, d+n, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">pref[<span class="number">0</span>] = suff[n] = <span class="number">0</span>;</span><br><span class="line">rep(i, <span class="number">1</span>, n<span class="number">-1</span>) pref[i] = pref[i<span class="number">-1</span>] + (ll)d[i];</span><br><span class="line">per(k, n<span class="number">-1</span>, <span class="number">1</span>) suff[k] = suff[k+<span class="number">1</span>] + (ll)d[k];</span><br><span class="line"><span class="keyword">for</span>(ll k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">&#123;</span><br><span class="line">ll j = lbound(d+<span class="number">1</span>, d+n, k, greater&lt;<span class="keyword">int</span>&gt;()) - d;</span><br><span class="line">ll s1 = (max(j, k+<span class="number">1</span>)-(k+<span class="number">1</span>))*k + suff[max(j, k+<span class="number">1</span>)];</span><br><span class="line">ll s2 = (max(j, k)-k)*k + suff[max(j, k)];</span><br><span class="line">st[<span class="number">0</span>][k][<span class="number">0</span>] = k*(k<span class="number">-1</span>) + s1 - pref[k] + k;</span><br><span class="line">st[<span class="number">1</span>][k][<span class="number">0</span>] = k*(k<span class="number">-1</span>) + s1 - pref[k];</span><br><span class="line">st[<span class="number">2</span>][k][<span class="number">0</span>] = k*(k<span class="number">-1</span>) + s2 - pref[k<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i, <span class="number">0</span>, <span class="number">2</span>) init(st[i]);</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">per(dn, n<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j &lt; n<span class="number">-1</span> &amp;&amp; d[j+<span class="number">1</span>] &gt;= dn) j++;</span><br><span class="line"><span class="keyword">if</span>((dn+pref[n<span class="number">-1</span>])%<span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(query(st[<span class="number">0</span>], <span class="number">1</span>, min(dn, j)) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"> <span class="keyword">if</span>(query(st[<span class="number">1</span>], max(<span class="number">1</span>, dn), j) &lt; -dn) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(query(st[<span class="number">2</span>], j+<span class="number">1</span>, n) &lt; dn) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cout &lt;&lt; dn &lt;&lt; " j=" &lt;&lt; j &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">// printf("[%d, %d] %d\n", 1, min(dn, j), query(st[0], 1, min(dn, j)));</span></span><br><span class="line"><span class="comment">// printf("[%d, %d] %d\n", max(1, dn), j, query(st[1], dn, j));</span></span><br><span class="line"><span class="comment">// printf("[%d, %d] %d\n", j+1, n, query(st[2], j+1, n));</span></span><br><span class="line">ans[++cnt] = dn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(query(st[<span class="number">1</span>], <span class="number">1</span>, n<span class="number">-1</span>) &gt;= <span class="number">0</span>) ans[++cnt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!cnt) <span class="built_in">printf</span>(<span class="string">"-1"</span>); <span class="keyword">else</span> per(i, cnt, <span class="number">1</span>)<span class="built_in">printf</span>(<span class="string">"%d "</span>, ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="Standard-solution"><a href="#Standard-solution" class="headerlink" title="Standard solution"></a>Standard solution</h3><p>这种几个大式子的case work实现起来是很繁琐的，debug也无比困难。于是通过<del>手玩样例，参考题解，</del>严格论证我们发现，可行的$d_n$一定是连续的一段区间（当然还要奇偶性相同）<br>这样我们就可以二分了，$O(N)$内判断Erdős–Gallai不等式要容易很多。怎么二分一个区间？只要先在$[1,n]$内找出左端点$l$，再在$[l,n]$内二分右端点即可。<br>其他细节见<a href="https://codeforces.com/blog/entry/64196" target="_blank" rel="noopener">Editorial</a>，这里贴一下std<br><figure class="highlight cpp"><figcaption><span>std.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 500000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOO_SMALL -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TOO_BIG 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_score</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C(N+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) ++C[A[i]];</span><br><span class="line">    ++C[value];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> less = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>; k &lt;= N; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> val = (i == k &amp;&amp; (i == N || A[i] &lt; value)) ? value : A[i++];</span><br><span class="line">        left += val;</span><br><span class="line">        --C[val];</span><br><span class="line">        right -= min(val, k);</span><br><span class="line">        less += C[k];</span><br><span class="line">        right += N-k-less;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right + (<span class="keyword">long</span> <span class="keyword">long</span>)(k+<span class="number">1</span>)*k) &#123;</span><br><span class="line">            <span class="keyword">return</span> (i == k) ? TOO_BIG : TOO_SMALL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">char</span>**)</span> </span>&#123;</span><br><span class="line">    ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, A + i);</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(A,A+N,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">int</span> parity = sum &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = (N - parity) / <span class="number">2</span>, lores = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_score(<span class="number">2</span>*mid + parity) == TOO_SMALL) &#123;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            lores = mid;</span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    lo = lores; </span><br><span class="line">    hi = (N - parity) / <span class="number">2</span>; </span><br><span class="line">    <span class="keyword">int</span> hires = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt;= hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_score(<span class="number">2</span>*mid + parity) == TOO_BIG) &#123;</span><br><span class="line">            hi = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hires = mid;</span><br><span class="line">            lo = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (lores == <span class="number">-1</span> || hires == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>); </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lores; i &lt;= hires; ++i) <span class="built_in">printf</span>(<span class="string">"%d "</span>, <span class="number">2</span>*i+parity);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Codeforces Good Bye 2018中的&lt;a href=&quot;https://codeforces.com/contest/1091/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;E&lt;/a&gt;是一道阅读理解题，题面中的给出了到&lt;a href=&quot;https://en.wikipedia.org/wiki/Graph\_realization\_problem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt;的链接，但比赛时我怎么有心情读一大段英文wiki…&lt;br&gt;这道题的背景知识叫&lt;strong&gt;可简单图化问题&lt;/strong&gt;(Graph Realization)，指给定一个有限序列 $D=(d_1,d_2,\cdots,d_n)$ ，是否存在一个无自环的无向图G，使得G中顶点的度数构成的序列为$D$。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RMK (2019-06-24)：原来这是离散数学的作业题…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://cothrax.xyz/categories/Algorithm/"/>
    
    
      <category term="Graph Theory" scheme="http://cothrax.xyz/tags/Graph-Theory/"/>
    
  </entry>
  
  <entry>
    <title>Fight Back</title>
    <link href="http://cothrax.xyz/2018/06/27/after-cee/"/>
    <id>http://cothrax.xyz/2018/06/27/after-cee/</id>
    <published>2018-06-27T09:24:31.000Z</published>
    <updated>2019-07-28T04:34:22.439Z</updated>
    
    <content type="html"><![CDATA[<style>#old-blog-link {    cursor: pointer;}</style><p>高考结束了。</p><p>掐指一算，离上一次AC也有600多天的时间了，以致东大机试时连裸的KMP都看不出来了…交大笔试也没过，自招没占到任何便宜，最后裸分出镜（捂脸<br>分数不尴不尬，卡在中间，想了想就去了UCAS。综评签了之后还跟招办老师纠缠了好久，那老师大概还没遇到过像我这么奇葩的学生…也怪我没认真看招生宣传。<br>从走进考场到查到分数，自信、焦虑、庆幸、担忧、憬然…揉在一起，最后剩下的也只是敲击键盘的平静。不过感触最深的，有两段对话。<br><a id="more"></a></p><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><blockquote><p>我妈心疼我：去这个学校你就别想玩呵</p></blockquote><p>引用知乎有一个回答吧，可能有点文不对题：<br><img src="/2018/06/27/after-cee/zhihu.png" title="zhihu"></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><img src="/2018/06/27/after-cee/my_xy.jpg" title="xy"><p>谢谢你，xy~</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>旧blog的源文件放在了ubuntu上，有一次做系统时给做掉了…<br>现移到<code>/old-blog/</code>子目录下：<a id="old-blog-link" onclick="location.href='/old-blog/'">戳我</a></p>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
#old-blog-link {
    cursor: pointer;
}
&lt;/style&gt;

&lt;p&gt;高考结束了。&lt;/p&gt;
&lt;p&gt;掐指一算，离上一次AC也有600多天的时间了，以致东大机试时连裸的KMP都看不出来了…交大笔试也没过，自招没占到任何便宜，最后裸分出镜（捂脸&lt;br&gt;分数不尴不尬，卡在中间，想了想就去了UCAS。综评签了之后还跟招办老师纠缠了好久，那老师大概还没遇到过像我这么奇葩的学生…也怪我没认真看招生宣传。&lt;br&gt;从走进考场到查到分数，自信、焦虑、庆幸、担忧、憬然…揉在一起，最后剩下的也只是敲击键盘的平静。不过感触最深的，有两段对话。&lt;br&gt;
    
    </summary>
    
      <category term="Nothing" scheme="http://cothrax.xyz/categories/Nothing/"/>
    
    
  </entry>
  
</feed>
